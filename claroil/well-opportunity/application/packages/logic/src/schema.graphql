scalar DateTime
scalar Date

type Info {
  name: String
  version: String
  dm_url: String
}

type Action {
  id: ID!
  name: String!
  type: String!
}

input ActionInput {
  id: ID!
  name: String!
  type: String!
}

type ActionOutcome {
  id: ID!
  action: Action!
  well: Well!
  probabilityOfAnomaly: Float!
  cost: Float!
  manHours: Float!
  increaseInOilRate: Float!
}

input ActionOutcomeInput {
  id: ID!
  action: ActionInput!
  well: WellInput!
  probabilityOfAnomaly: Float!
  cost: Float!
  manHours: Float!
  increaseInOilRate: Float!
}

type ActionFinancialEstimate {
  id: ID!
  action: Action!
  well: Well!
  impact: Float!
  cost: Float!
  manHours: Float!
}

input ActionFinancialEstimateInput {
  id: ID!
  action: ActionInput!
  well: WellInput!
  impact: Float!
  cost: Float!
  manHours: Float!
}

type Well {
  id: ID!
  name: String!
  predictedMetrics: [Metrics!]!
  measuredMetrics: [Metrics!]!
}

input WellInput {
  id: ID!
  name: String!
  predictedMetrics: [MetricsInput!]!
  measuredMetrics: [MetricsInput!]!
}

type Opportunity {
  id: ID!
  name: String!
  createdAt: DateTime!
  actions: [Action!]!
  incrementalRevenue: Float!
  costReduction: Float!
  cost: Float!
  well: Well!
  manHours: Float!
}

input OpportunityInput {
  id: ID!
  name: String!
  createdAt: DateTime!
  actions: [ActionInput!]!
  incrementalRevenue: Float!
  costReduction: Float!
  cost: Float!
  well: WellInput!
  manHours: Float!
}


type Constraint {
  id: ID!
  budget: Float!
  manHours: Float!
}

input ConstraintInput {
  id: ID!
  budget: Float!
  manHours: Float!
}

type Metrics {
  id: ID!
  waterCut: Float!
  GOR: Float!
  oilRate: Float!
  date: Int!
}

input MetricsInput {
  id: ID!
  waterCut: Float!
  GOR: Float!
  oilRate: Float!
  date: Int!
}

type Query {
  info: Info

  allActiveWells: [Well!]!
  activeWellByID(wellId: String!): Well!

  wellPredictedMetrics(well: WellInput!, date: Int!): Metrics!
  wellMeasuredMetrics(well: WellInput!, date: Int!): Metrics!
  wellActionOutcome(well: WellInput!, action: ActionInput!): ActionOutcome!

  discoverIntervention(
    predictedMetrics: MetricsInput!
    measuredMetrics: MetricsInput!
  ): Action!

  shouldTestWell(
    healthIndex: Float!
    lastTestDay: Int!
    today: Int!
  ): Action!

  healthIndex(
    predictedMetrics: MetricsInput!
    measuredMetrics: MetricsInput!
  ): Float!

  wellLastTestDate(well: WellInput!, today: Int!): Int!
  todayDate: Int!

  applyConstraints(
    opportunities: [OpportunityInput!]!
    constraints: ConstraintInput!
  ): [Opportunity!]!

  combineActionImpacts(
    well: WellInput!
    costReduction: [ActionFinancialEstimateInput!]!
    revenueGains: [ActionFinancialEstimateInput!]!
  ): Opportunity!

  interventionRevenueGain(
    oilPrice: Float!
    measuredMetrics: MetricsInput!
    actionOutcome: ActionOutcomeInput!
  ): [ActionFinancialEstimate!]!


  skippingTestCostReduction(
    oilPrice: Float!
    measuredMetrics: MetricsInput!
    actionOutcome: ActionOutcomeInput!
  ): [ActionFinancialEstimate!]!

  currentOilPrice: Float!


}
