scalar DateTime
scalar Date

type Info {
  name: String
  version: String
}

type Action {
  id: ID!
  name: String
  type: String
}

type ActionProbabiliy {
  id: ID!
  action: Action!
  probability: Float!
}

type ActionFinancialEstimate {
  id: ID!
  action: Action
  impact: Float!
  cost: Float!
}

input ActionInput {
  id: ID!
  name: String
  type: String
}

input ActionFinancialEstimateInput {
  id: ID!
  action: ActionInput
  impact: Float!
  cost: Float!
}

type Well {
  id: ID!
  name: String!
}

input WellInput {
  id: ID!
  name: String
}

input WellByNameInput {
  id: ID
  name: String!
}

type Opportunity {
  id: ID!
  name: String!
  createdAt: DateTime!
  actions: [Action!]!
  incrementalRevenue: Float!
  costReduction: Float!
  cost: Float!
}

input OpportunityInput {
  id: ID!
  name: String!
  createdAt: DateTime!
  actions: [ActionInput!]!
  incrementalRevenue: Float!
  costReduction: Float!
  cost: Float!
}

type ActionProbability {
  id: ID!
  action: Action
  probability: Float!
}

input ActionProbabilityInput {
  id: ID!
  action: ActionInput
  probability: Float!
}

input ConstraintInput {
  id: ID!
  budget: Float!
  manHours: Float!
}

type Constraint {
  id: ID!
  budget: Float!
  manHours: Float!
}

type Metrics {
  id: ID!
  waterCut: Float!
  GOR: Float!
  oilRate: Float!
}

input MetricsInput {
  id: ID!
  waterCut: Float!
  GOR: Float!
  oilRate: Float!
}

type Query {
  info: Info

  ##Getters
  wellPredictatedMetrics(well: WellByNameInput!): Metrics!
  wellMeasuredMetrics(well: WellByNameInput!): Metrics!
  getWellAnomalyProbability(well: WellByNameInput!): Float!

  discoverIntervention(
    predictedMetrics: MetricsInput!
    measuredMetrics: MetricsInput!
  ): ActionProbability!
  shouldTestWell(
    healthIndex: Float!
    lastTestDate: Date!
    wellAnomalyProbability: Float!
  ): ActionProbability!
  getWellLastTestDate(well: WellInput!): Date!
  applyConstraints(
    opportunities: [OpportunityInput!]!
    constraints: ConstraintInput!
  ): [Opportunity!]!
  combineActionImpacts(
    costReduction: [ActionFinancialEstimateInput!]!
    revenueGains: [ActionFinancialEstimateInput!]!
  ): Opportunity!

  calculateCostSavingsOfSkippingATest(
    measuredMetrics: MetricsInput!
    probabilityOfAnomaly: Float!
    oilPrice: Float!
  ): Float!

  calculateInterventionRevenueGain(
    oilPrice: Float!
    interventionCost: Float!
    measuredMetrics: MetricsInput!
    action: ActionInput
  ): ActionFinancialEstimate!
  calculateHealthIndex(
    predictedMetrics: MetricsInput!
    measuredMetrics: MetricsInput!
  ): Float!

  calculateInterventionCost(well: WellInput!, action: ActionInput): Float!
  calculateTestCost(well: WellInput!, action: ActionInput): Float!

  allWells: [Well]!
  getDefaultConstraints: Constraint!

  ##Helpers
  projectAction(actionProbability: ActionProbabilityInput!): Action
  projectProbability(actionProbability: ActionProbabilityInput!): Float!
  wrapActionFinancialEstimate(
    actionEstimate: ActionFinancialEstimateInput!
  ): [ActionFinancialEstimate!]!
  makeFinancialEstimate(
    action: ActionInput
    impact: Float!
    cost: Float!
  ): ActionFinancialEstimate!
  invertFloat(value: Float!): Float!

  getCurrentOilPrice: Float!
}
