# source: http://138.91.199.6:8003/service/33ff60a5-ddc8-475a-a964-ae278f63db6c/graphql
# timestamp: Sat Apr 21 2018 13:34:51 GMT-0700 (PDT)

input AddBotActionInput {
  name: String
  serviceName: String!
  serviceId: ID
  eventName: String
  mutationName: String
  queryName: String
  inputInstanceRef: InstanceRefInput
  outputInstanceRef: InstanceRefInput
}

"""Autogenerated input for adding instance of Employer"""
input AddEmployerInput {
  id: ID
  name: String
  ceo: ID
}

"""Autogenerated input for adding instance of Person"""
input AddPersonInput {
  id: ID
  name: String
  dob: String
  employer: ID
}

type BotAction {
  """io.maana.kind"""
  id: ID!
  name: String!

  """bookkeeping"""
  created: DateTime!
  lastUpdated: DateTime!
  status: BotActionStatus!
  progress: Float
  errors: [JSON!]

  """operation"""
  service: Service!
  eventName: String
  mutation: ServiceMutation
  query: ServiceQuery
  input: InstanceRef
  output: InstanceRef
}

type BotActionAddedEvent {
  id: ID!
  name: String!
  serviceName: String!
  serviceId: ID
  eventName: String
  mutationName: String
  queryName: String
  inputInstanceRef: InstanceRef
  outputInstanceRef: InstanceRef
}

enum BotActionStatus {
  PENDING
  IN_PROGRESS
  STOPPING
  STOPPED
  ERROR
  COMPLETE
}

type BotActionUpdatedEvent {
  id: ID!
  oldStatus: BotActionStatus!
  newStatus: BotActionStatus!
  progress: Float
  errors: [JSON!]
}

scalar Date

scalar DateTime

type Employer {
  id: ID!
  name: String!
  ceo: Person
}

type Field {
  """required"""
  id: ID!
  name: String!
  type: FieldType!

  """optional"""
  description: String
  modifiers: [FieldModifiers]
  typeKindId: ID

  """UI hints"""
  displayAs: [String]
  hide: Boolean
  autoFocus: Boolean
  readonly: Boolean

  """inferred"""
  kind: Kind
  acceptedFieldClassification: FieldClassification
}

type FieldClassification {
  id: ID!
  fieldId: ID!
  name: String!
  score: Float!
}

input FieldFilterInput {
  """one of the following is required"""
  fieldId: ID
  fieldName: String
  op: String!
  value: FieldValueInput!
}

enum FieldModifiers {
  NONULL
  LIST
}

enum FieldType {
  ID
  STRING
  INT
  FLOAT
  BOOLEAN
  DATE
  TIME
  DATETIME
  JSON
  KIND
}

type FieldValue {
  """Types"""
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  """List forms"""
  l_IDENTITY: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

input FieldValueInput {
  """Types"""
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  """List forms"""
  l_IDENTITY: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

type Info {
  id: ID!
  name: String!
  description: String
}

type Instance {
  """required"""
  id: ID!

  """optional"""
  name: String
  kindId: ID!
  kind: Kind
  fieldIds: [ID]

  """rowKey: Int"""
  fieldValues: [FieldValue]

  """inferred"""
  linksFrom: [Link]
  linksTo: [Link]
}

type InstanceRef {
  """required"""
  id: ID!

  """- one of:"""
  kindId: ID
  kindName: String

  """optional"""
  name: String
  url: String

  """inferred"""
  kind: Kind
  instance: Instance
  innerKind: Kind
}

input InstanceRefInput {
  id: ID
  name: String
  kindId: ID
  kindName: String
  url: String
}

type InstanceSet {
  kindId: ID!
  kind: Kind!
  fieldIds: [ID]

  """rowKeys: [Int]"""
  records: [[FieldValue]]
}

scalar JSON

type Kind {
  """required"""
  id: ID!
  name: String!

  """optional"""
  serviceId: ID
  description: String
  thumbnailUrl: String
  isPublic: Boolean
  isManaged: Boolean
  schema(includeDeleted: Boolean = false, fieldIds: [ID!], fieldNames: [String!], fieldKinds: [ID!]): [Field]
  nameField: ID

  """inferred"""
  relationsFrom: [Relation]
  relationsTo: [Relation]
  linksFrom: [Link]
  linksTo: [Link]
  service: Service
}

input KindQueryInput {
  """projected kind (one of the following is required)"""
  kindId: ID
  kindName: String
  serviceId: ID

  """filters (where)"""
  fieldFilters: [FieldFilterInput]

  """conjunction (where)"""
  and: [KindQueryInput]

  """disjunction (where)"""
  or: [KindQueryInput]

  """join (if conjunction or disjunction)"""
  fromFieldId: ID
  fromFieldName: String
  toFieldId: ID
  toFieldName: String
  take: Int
}

type Link {
  """required"""
  id: ID!
  relation: Relation!
  fromKind: Kind!
  toKind: Kind!

  """optional"""
  name: String
  weight: Float
  fromField: Field
  fromInstance: Instance
  fromOffset: String
  fromSpan: String
  toField: Field
  toInstance: Instance
  toOffset: String
  toSpan: String
}

type Mutation {
  """Autogenerated mutation for adding single instance of Person"""
  addPerson(input: AddPersonInput!): ID

  """Autogenerated mutation for adding multiple instances of Person"""
  addPersons(input: [AddPersonInput]!): [ID]

  """Autogenerated mutation for updating single instance of Person"""
  updatePerson(input: UpdatePersonInput!): ID

  """Autogenerated mutation for updating multiple instance of Person"""
  updatePersons(input: [UpdatePersonInput]!): [ID]

  """Autogenerated mutation for deleting single instance of Person"""
  deletePerson(id: ID!): Person

  """Autogenerated mutation for deleting multiple instance of Person"""
  deletePersons(ids: [ID!]): [Person]

  """Autogenerated mutation for adding single instance of Employer"""
  addEmployer(input: AddEmployerInput!): ID

  """Autogenerated mutation for adding multiple instances of Employer"""
  addEmployers(input: [AddEmployerInput]!): [ID]

  """Autogenerated mutation for updating single instance of Employer"""
  updateEmployer(input: UpdateEmployerInput!): ID

  """Autogenerated mutation for updating multiple instance of Employer"""
  updateEmployers(input: [UpdateEmployerInput]!): [ID]

  """Autogenerated mutation for deleting single instance of Employer"""
  deleteEmployer(id: ID!): Employer

  """Autogenerated mutation for deleting multiple instance of Employer"""
  deleteEmployers(ids: [ID!]): [Employer]
  addBotAction(input: AddBotActionInput!): ID
  runBotAction(id: ID!): BotActionStatus
  stopBotAction(id: ID!): BotActionStatus
  updateBotAction(input: UpdateBotActionInput!): BotActionStatus
}

type Person {
  id: ID!
  name: String!
  dob: String
  employer: Employer
}

type Query {
  """All instances of Person kind"""
  allPersons: [Person]

  """Get single instance of Person kind by ID"""
  person(id: ID!): Person

  """Get list of instance of Person kind by IDs"""
  persons(ids: [ID]!): [Person]

  """All instances of Employer kind"""
  allEmployers: [Employer]

  """Get single instance of Employer kind by ID"""
  employer(id: ID!): Employer

  """Get list of instance of Employer kind by IDs"""
  employers(ids: [ID]!): [Employer]
  info: Info!
  botAction(id: ID!): BotAction
  botActions(ids: [ID!]!): [BotAction]
  allBotActions: [BotAction]

  """
  Returns kind by ID, regardless of whether kind is used by the service or not.
  Can only be used to find kind in a tenant of a service.
  OR
  Returns kind by name. If serviceId is omitted, will return kind of a current service/workspace,
  otherwise can be used to find a kind with specific name of a specific service (e.g. kind 'Workspace' of Portal Service)
  """
  kind(id: ID, name: String, serviceId: ID): Kind

  """
  Returns all kinds defined *in this service* (sic!).
  This includes managed kinds and kinds used by workspace/service
  """
  allKinds(take: Int): [Kind]

  """Kind Query"""
  query(input: KindQueryInput!): InstanceSet
}

type Relation {
  """required"""
  id: ID!
  name: String!

  """optional"""
  description: String
  undirected: Boolean
  weight: Float

  """inferred"""
  links: [Link]
}

type Service {
  """required"""
  id: ID!
  name: String!
  isSystem: Boolean!
  endpointUrl: String!

  """optional"""
  description: String
  subscriptionEndpointUrl: String
  thumbnailUrl: String
  tags: [String]
  status: Int
  lastChecked: Date
  instances: [ServiceInstance]

  """inferred"""
  kinds: [Kind]
  queries: [ServiceQuery]
  mutations: [ServiceMutation]
  subscriptions: [ServiceSubscription]
}

type ServiceInstance {
  """required"""
  id: ID!
  dockerServiceName: String!
  hostName: String!
  desiredState: String!
  currentState: String!
}

type ServiceMutation {
  id: ID!
  name: String!
}

type ServiceQuery {
  id: ID!
  name: String!
}

type ServiceSubscription {
  id: ID!
  name: String!
}

type Subscription {
  botActionAdded: BotActionAddedEvent!
  botActionUpdated: BotActionUpdatedEvent!
}

scalar Time

input UpdateBotActionInput {
  status: BotActionStatus!
  progress: Float
  error: JSON
}

"""Autogenerated input for updating instance of Employer"""
input UpdateEmployerInput {
  id: ID!
  name: String!
  ceo: UpdatePersonInput
}

"""Autogenerated input for updating instance of Person"""
input UpdatePersonInput {
  id: ID!
  name: String!
  dob: String
  employer: UpdateEmployerInput
}
