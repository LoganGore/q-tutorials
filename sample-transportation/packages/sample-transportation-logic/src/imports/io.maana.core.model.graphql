# source: http://localhost:8051
# timestamp: Fri Jul 20 2018 07:52:06 GMT-0700 (PDT)

type AggregateBooleanKind {
  count: Int!
}

type AggregateCategorical {
  count: Int!
}

type AggregateContent {
  count: Int!
}

type AggregateCountryCode {
  count: Int!
}

type AggregateCurrency {
  count: Int!
}

type AggregateDateKind {
  count: Int!
}

type AggregateDocFile {
  count: Int!
}

type AggregateDocument {
  count: Int!
}

type AggregateDuration {
  count: Int!
}

type AggregateEmail {
  count: Int!
}

type AggregateGeoCoordinate {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateIpAddress {
  count: Int!
}

type AggregateLatitude {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateLongitude {
  count: Int!
}

type AggregateNumber {
  count: Int!
}

type AggregateOrderedList {
  count: Int!
}

type AggregateOrderedListItem {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregatePage {
  count: Int!
}

type AggregatePercentage {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregatePhoneNumber {
  count: Int!
}

type AggregatePhysicalQuantity {
  count: Int!
}

type AggregateSection {
  count: Int!
}

type AggregateSocialSecurityNumber {
  count: Int!
}

type AggregateTable {
  count: Int!
}

type AggregateTimeEstimate {
  count: Int!
}

type AggregateTimeKind {
  count: Int!
}

type AggregateUnorderedList {
  count: Int!
}

type AggregateUnorderedListItem {
  count: Int!
}

type AggregateURL {
  count: Int!
}

type AggregateUSState {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type BooleanKind implements Node {
  id: ID!
  value: Boolean!
}

"""A connection to a list of items."""
type BooleanKindConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BooleanKindEdge]!
  aggregate: AggregateBooleanKind!
}

input BooleanKindCreateInput {
  value: Boolean!
}

"""An edge in a connection."""
type BooleanKindEdge {
  """The item at the end of the edge."""
  node: BooleanKind!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BooleanKindOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BooleanKindPreviousValues {
  id: ID!
  value: Boolean!
}

type BooleanKindSubscriptionPayload {
  mutation: MutationType!
  node: BooleanKind
  updatedFields: [String!]
  previousValues: BooleanKindPreviousValues
}

input BooleanKindSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BooleanKindSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BooleanKindSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BooleanKindSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BooleanKindWhereInput
}

input BooleanKindUpdateInput {
  value: Boolean
}

input BooleanKindWhereInput {
  """Logical AND on all given filters."""
  AND: [BooleanKindWhereInput!]

  """Logical OR on all given filters."""
  OR: [BooleanKindWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BooleanKindWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: Boolean

  """All values that are not equal to given value."""
  value_not: Boolean
}

input BooleanKindWhereUniqueInput {
  id: ID
}

type Categorical implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type CategoricalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoricalEdge]!
  aggregate: AggregateCategorical!
}

input CategoricalCreateInput {
  name: String!
}

"""An edge in a connection."""
type CategoricalEdge {
  """The item at the end of the edge."""
  node: Categorical!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoricalOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoricalPreviousValues {
  id: ID!
  name: String!
}

type CategoricalSubscriptionPayload {
  mutation: MutationType!
  node: Categorical
  updatedFields: [String!]
  previousValues: CategoricalPreviousValues
}

input CategoricalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoricalSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoricalSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoricalSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoricalWhereInput
}

input CategoricalUpdateInput {
  name: String
}

input CategoricalWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoricalWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoricalWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoricalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input CategoricalWhereUniqueInput {
  id: ID
}

type Content implements Node {
  id: ID!
  table(where: TableWhereInput): Table
  unorderedList(where: UnorderedListWhereInput): UnorderedList
  orderedList(where: OrderedListWhereInput): OrderedList
  text: String
  image(where: ImageWhereInput): Image
}

"""A connection to a list of items."""
type ContentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContentEdge]!
  aggregate: AggregateContent!
}

input ContentCreateInput {
  text: String
  table: TableCreateOneInput
  unorderedList: UnorderedListCreateOneInput
  orderedList: OrderedListCreateOneInput
  image: ImageCreateOneInput
}

input ContentCreateManyInput {
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

"""An edge in a connection."""
type ContentEdge {
  """The item at the end of the edge."""
  node: Content!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ContentPreviousValues {
  id: ID!
  text: String
}

type ContentSubscriptionPayload {
  mutation: MutationType!
  node: Content
  updatedFields: [String!]
  previousValues: ContentPreviousValues
}

input ContentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContentWhereInput
}

input ContentUpdateDataInput {
  text: String
  table: TableUpdateOneInput
  unorderedList: UnorderedListUpdateOneInput
  orderedList: OrderedListUpdateOneInput
  image: ImageUpdateOneInput
}

input ContentUpdateInput {
  text: String
  table: TableUpdateOneInput
  unorderedList: UnorderedListUpdateOneInput
  orderedList: OrderedListUpdateOneInput
  image: ImageUpdateOneInput
}

input ContentUpdateManyInput {
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  delete: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueNestedInput!]
  upsert: [ContentUpsertWithWhereUniqueNestedInput!]
}

input ContentUpdateWithWhereUniqueNestedInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateDataInput!
}

input ContentUpsertWithWhereUniqueNestedInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateDataInput!
  create: ContentCreateInput!
}

input ContentWhereInput {
  """Logical AND on all given filters."""
  AND: [ContentWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  table: TableWhereInput
  unorderedList: UnorderedListWhereInput
  orderedList: OrderedListWhereInput
  image: ImageWhereInput
  _MagicalBackRelation_ContentToUnorderedListItem_every: UnorderedListItemWhereInput
  _MagicalBackRelation_ContentToUnorderedListItem_some: UnorderedListItemWhereInput
  _MagicalBackRelation_ContentToUnorderedListItem_none: UnorderedListItemWhereInput
  _MagicalBackRelation_ContentToDocument_every: DocumentWhereInput
  _MagicalBackRelation_ContentToDocument_some: DocumentWhereInput
  _MagicalBackRelation_ContentToDocument_none: DocumentWhereInput
  _MagicalBackRelation_PageHeader_every: PageWhereInput
  _MagicalBackRelation_PageHeader_some: PageWhereInput
  _MagicalBackRelation_PageHeader_none: PageWhereInput
  _MagicalBackRelation_TableHeader_every: TableWhereInput
  _MagicalBackRelation_TableHeader_some: TableWhereInput
  _MagicalBackRelation_TableHeader_none: TableWhereInput
  _MagicalBackRelation_PageFooter_every: PageWhereInput
  _MagicalBackRelation_PageFooter_some: PageWhereInput
  _MagicalBackRelation_PageFooter_none: PageWhereInput
  _MagicalBackRelation_ContentToOrderedListItem_every: OrderedListItemWhereInput
  _MagicalBackRelation_ContentToOrderedListItem_some: OrderedListItemWhereInput
  _MagicalBackRelation_ContentToOrderedListItem_none: OrderedListItemWhereInput
  _MagicalBackRelation_ContentToSection_every: SectionWhereInput
  _MagicalBackRelation_ContentToSection_some: SectionWhereInput
  _MagicalBackRelation_ContentToSection_none: SectionWhereInput
  _MagicalBackRelation_PageContent_every: PageWhereInput
  _MagicalBackRelation_PageContent_some: PageWhereInput
  _MagicalBackRelation_PageContent_none: PageWhereInput
  _MagicalBackRelation_TableRows_every: TableWhereInput
  _MagicalBackRelation_TableRows_some: TableWhereInput
  _MagicalBackRelation_TableRows_none: TableWhereInput
}

input ContentWhereUniqueInput {
  id: ID
}

type CountryCode implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type CountryCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CountryCodeEdge]!
  aggregate: AggregateCountryCode!
}

input CountryCodeCreateInput {
  name: String!
}

"""An edge in a connection."""
type CountryCodeEdge {
  """The item at the end of the edge."""
  node: CountryCode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CountryCodeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CountryCodePreviousValues {
  id: ID!
  name: String!
}

type CountryCodeSubscriptionPayload {
  mutation: MutationType!
  node: CountryCode
  updatedFields: [String!]
  previousValues: CountryCodePreviousValues
}

input CountryCodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CountryCodeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountryCodeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountryCodeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryCodeWhereInput
}

input CountryCodeUpdateInput {
  name: String
}

input CountryCodeWhereInput {
  """Logical AND on all given filters."""
  AND: [CountryCodeWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountryCodeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountryCodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input CountryCodeWhereUniqueInput {
  id: ID
}

type Currency implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type CurrencyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CurrencyEdge]!
  aggregate: AggregateCurrency!
}

input CurrencyCreateInput {
  name: String!
}

"""An edge in a connection."""
type CurrencyEdge {
  """The item at the end of the edge."""
  node: Currency!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CurrencyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CurrencyPreviousValues {
  id: ID!
  name: String!
}

type CurrencySubscriptionPayload {
  mutation: MutationType!
  node: Currency
  updatedFields: [String!]
  previousValues: CurrencyPreviousValues
}

input CurrencySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CurrencySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CurrencySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CurrencySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CurrencyWhereInput
}

input CurrencyUpdateInput {
  name: String
}

input CurrencyWhereInput {
  """Logical AND on all given filters."""
  AND: [CurrencyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CurrencyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CurrencyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input CurrencyWhereUniqueInput {
  id: ID
}

type DateKind implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type DateKindConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DateKindEdge]!
  aggregate: AggregateDateKind!
}

input DateKindCreateInput {
  name: String!
}

"""An edge in a connection."""
type DateKindEdge {
  """The item at the end of the edge."""
  node: DateKind!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DateKindOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DateKindPreviousValues {
  id: ID!
  name: String!
}

type DateKindSubscriptionPayload {
  mutation: MutationType!
  node: DateKind
  updatedFields: [String!]
  previousValues: DateKindPreviousValues
}

input DateKindSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DateKindSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DateKindSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DateKindSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DateKindWhereInput
}

input DateKindUpdateInput {
  name: String
}

input DateKindWhereInput {
  """Logical AND on all given filters."""
  AND: [DateKindWhereInput!]

  """Logical OR on all given filters."""
  OR: [DateKindWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DateKindWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input DateKindWhereUniqueInput {
  id: ID
}

scalar DateTime

type DocFile implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type DocFileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocFileEdge]!
  aggregate: AggregateDocFile!
}

input DocFileCreateInput {
  name: String!
}

"""An edge in a connection."""
type DocFileEdge {
  """The item at the end of the edge."""
  node: DocFile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DocFileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DocFilePreviousValues {
  id: ID!
  name: String!
}

type DocFileSubscriptionPayload {
  mutation: MutationType!
  node: DocFile
  updatedFields: [String!]
  previousValues: DocFilePreviousValues
}

input DocFileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DocFileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocFileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocFileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DocFileWhereInput
}

input DocFileUpdateInput {
  name: String
}

input DocFileWhereInput {
  """Logical AND on all given filters."""
  AND: [DocFileWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocFileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocFileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input DocFileWhereUniqueInput {
  id: ID
}

type Document implements Node {
  id: ID!
  name: String!
  text: String
  xhtml: String
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page!]
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section!]
  content(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
}

"""A connection to a list of items."""
type DocumentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocumentEdge]!
  aggregate: AggregateDocument!
}

input DocumentCreateInput {
  name: String!
  text: String
  xhtml: String
  pages: PageCreateManyInput
  sections: SectionCreateManyInput
  content: ContentCreateManyInput
}

"""An edge in a connection."""
type DocumentEdge {
  """The item at the end of the edge."""
  node: Document!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DocumentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  text_ASC
  text_DESC
  xhtml_ASC
  xhtml_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DocumentPreviousValues {
  id: ID!
  name: String!
  text: String
  xhtml: String
}

type DocumentSubscriptionPayload {
  mutation: MutationType!
  node: Document
  updatedFields: [String!]
  previousValues: DocumentPreviousValues
}

input DocumentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DocumentWhereInput
}

input DocumentUpdateInput {
  name: String
  text: String
  xhtml: String
  pages: PageUpdateManyInput
  sections: SectionUpdateManyInput
  content: ContentUpdateManyInput
}

input DocumentWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  xhtml: String

  """All values that are not equal to given value."""
  xhtml_not: String

  """All values that are contained in given list."""
  xhtml_in: [String!]

  """All values that are not contained in given list."""
  xhtml_not_in: [String!]

  """All values less than the given value."""
  xhtml_lt: String

  """All values less than or equal the given value."""
  xhtml_lte: String

  """All values greater than the given value."""
  xhtml_gt: String

  """All values greater than or equal the given value."""
  xhtml_gte: String

  """All values containing the given string."""
  xhtml_contains: String

  """All values not containing the given string."""
  xhtml_not_contains: String

  """All values starting with the given string."""
  xhtml_starts_with: String

  """All values not starting with the given string."""
  xhtml_not_starts_with: String

  """All values ending with the given string."""
  xhtml_ends_with: String

  """All values not ending with the given string."""
  xhtml_not_ends_with: String
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
  sections_every: SectionWhereInput
  sections_some: SectionWhereInput
  sections_none: SectionWhereInput
  content_every: ContentWhereInput
  content_some: ContentWhereInput
  content_none: ContentWhereInput
}

input DocumentWhereUniqueInput {
  id: ID
}

type Duration implements Node {
  id: ID!
}

"""A connection to a list of items."""
type DurationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DurationEdge]!
  aggregate: AggregateDuration!
}

input DurationCreateOneInput {
  connect: DurationWhereUniqueInput
}

"""An edge in a connection."""
type DurationEdge {
  """The item at the end of the edge."""
  node: Duration!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DurationOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DurationPreviousValues {
  id: ID!
}

type DurationSubscriptionPayload {
  mutation: MutationType!
  node: Duration
  updatedFields: [String!]
  previousValues: DurationPreviousValues
}

input DurationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DurationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DurationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DurationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DurationWhereInput
}

input DurationUpdateOneInput {
  connect: DurationWhereUniqueInput
  delete: Boolean
}

input DurationWhereInput {
  """Logical AND on all given filters."""
  AND: [DurationWhereInput!]

  """Logical OR on all given filters."""
  OR: [DurationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DurationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _MagicalBackRelation_DurationToTimeEstimate_every: TimeEstimateWhereInput
  _MagicalBackRelation_DurationToTimeEstimate_some: TimeEstimateWhereInput
  _MagicalBackRelation_DurationToTimeEstimate_none: TimeEstimateWhereInput
}

input DurationWhereUniqueInput {
  id: ID
}

type Email implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type EmailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmailEdge]!
  aggregate: AggregateEmail!
}

input EmailCreateInput {
  name: String!
}

"""An edge in a connection."""
type EmailEdge {
  """The item at the end of the edge."""
  node: Email!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmailPreviousValues {
  id: ID!
  name: String!
}

type EmailSubscriptionPayload {
  mutation: MutationType!
  node: Email
  updatedFields: [String!]
  previousValues: EmailPreviousValues
}

input EmailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmailWhereInput
}

input EmailUpdateInput {
  name: String
}

input EmailWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input EmailWhereUniqueInput {
  id: ID
}

type GeoCoordinate implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type GeoCoordinateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GeoCoordinateEdge]!
  aggregate: AggregateGeoCoordinate!
}

input GeoCoordinateCreateInput {
  name: String!
}

"""An edge in a connection."""
type GeoCoordinateEdge {
  """The item at the end of the edge."""
  node: GeoCoordinate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GeoCoordinateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GeoCoordinatePreviousValues {
  id: ID!
  name: String!
}

type GeoCoordinateSubscriptionPayload {
  mutation: MutationType!
  node: GeoCoordinate
  updatedFields: [String!]
  previousValues: GeoCoordinatePreviousValues
}

input GeoCoordinateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoCoordinateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoCoordinateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoCoordinateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GeoCoordinateWhereInput
}

input GeoCoordinateUpdateInput {
  name: String
}

input GeoCoordinateWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoCoordinateWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoCoordinateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoCoordinateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input GeoCoordinateWhereUniqueInput {
  id: ID
}

type Image implements Node {
  id: ID!
  name: String!
  url: String
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  name: String!
  url: String
}

input ImageCreateOneInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ImagePreviousValues {
  id: ID!
  name: String!
  url: String
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateDataInput {
  name: String
  url: String
}

input ImageUpdateInput {
  name: String
  url: String
}

input ImageUpdateOneInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ImageUpdateDataInput
  upsert: ImageUpsertNestedInput
}

input ImageUpsertNestedInput {
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  _MagicalBackRelation_ContentToImage_every: ContentWhereInput
  _MagicalBackRelation_ContentToImage_some: ContentWhereInput
  _MagicalBackRelation_ContentToImage_none: ContentWhereInput
}

input ImageWhereUniqueInput {
  id: ID
}

type IpAddress implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type IpAddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IpAddressEdge]!
  aggregate: AggregateIpAddress!
}

input IpAddressCreateInput {
  name: String!
}

"""An edge in a connection."""
type IpAddressEdge {
  """The item at the end of the edge."""
  node: IpAddress!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IpAddressOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type IpAddressPreviousValues {
  id: ID!
  name: String!
}

type IpAddressSubscriptionPayload {
  mutation: MutationType!
  node: IpAddress
  updatedFields: [String!]
  previousValues: IpAddressPreviousValues
}

input IpAddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IpAddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IpAddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IpAddressSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IpAddressWhereInput
}

input IpAddressUpdateInput {
  name: String
}

input IpAddressWhereInput {
  """Logical AND on all given filters."""
  AND: [IpAddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [IpAddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IpAddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input IpAddressWhereUniqueInput {
  id: ID
}

type Latitude implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type LatitudeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LatitudeEdge]!
  aggregate: AggregateLatitude!
}

input LatitudeCreateInput {
  name: String!
}

"""An edge in a connection."""
type LatitudeEdge {
  """The item at the end of the edge."""
  node: Latitude!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LatitudeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LatitudePreviousValues {
  id: ID!
  name: String!
}

type LatitudeSubscriptionPayload {
  mutation: MutationType!
  node: Latitude
  updatedFields: [String!]
  previousValues: LatitudePreviousValues
}

input LatitudeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LatitudeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LatitudeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LatitudeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LatitudeWhereInput
}

input LatitudeUpdateInput {
  name: String
}

input LatitudeWhereInput {
  """Logical AND on all given filters."""
  AND: [LatitudeWhereInput!]

  """Logical OR on all given filters."""
  OR: [LatitudeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LatitudeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input LatitudeWhereUniqueInput {
  id: ID
}

type Location implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  name: String!
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  id: ID!
  name: String!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateInput {
  name: String
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Longitude implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type LongitudeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LongitudeEdge]!
  aggregate: AggregateLongitude!
}

input LongitudeCreateInput {
  name: String!
}

"""An edge in a connection."""
type LongitudeEdge {
  """The item at the end of the edge."""
  node: Longitude!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LongitudeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LongitudePreviousValues {
  id: ID!
  name: String!
}

type LongitudeSubscriptionPayload {
  mutation: MutationType!
  node: Longitude
  updatedFields: [String!]
  previousValues: LongitudePreviousValues
}

input LongitudeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LongitudeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LongitudeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LongitudeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LongitudeWhereInput
}

input LongitudeUpdateInput {
  name: String
}

input LongitudeWhereInput {
  """Logical AND on all given filters."""
  AND: [LongitudeWhereInput!]

  """Logical OR on all given filters."""
  OR: [LongitudeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LongitudeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input LongitudeWhereUniqueInput {
  id: ID
}

type Mutation {
  createLatitude(data: LatitudeCreateInput!): Latitude!
  createLongitude(data: LongitudeCreateInput!): Longitude!
  createUSState(data: USStateCreateInput!): USState!
  createDocFile(data: DocFileCreateInput!): DocFile!
  createCountryCode(data: CountryCodeCreateInput!): CountryCode!
  createCategorical(data: CategoricalCreateInput!): Categorical!
  createBooleanKind(data: BooleanKindCreateInput!): BooleanKind!
  createCurrency(data: CurrencyCreateInput!): Currency!
  createDateKind(data: DateKindCreateInput!): DateKind!
  createTimeKind(data: TimeKindCreateInput!): TimeKind!
  createGeoCoordinate(data: GeoCoordinateCreateInput!): GeoCoordinate!
  createSocialSecurityNumber(data: SocialSecurityNumberCreateInput!): SocialSecurityNumber!
  createOrganization(data: OrganizationCreateInput!): Organization!
  createLocation(data: LocationCreateInput!): Location!
  createNumber(data: NumberCreateInput!): Number!
  createPercentage(data: PercentageCreateInput!): Percentage!
  createPhoneNumber(data: PhoneNumberCreateInput!): PhoneNumber!
  createEmail(data: EmailCreateInput!): Email!
  createIpAddress(data: IpAddressCreateInput!): IpAddress!
  createURL(data: URLCreateInput!): URL!
  createPhysicalQuantity(data: PhysicalQuantityCreateInput!): PhysicalQuantity!
  createDocument(data: DocumentCreateInput!): Document!
  createPerson(data: PersonCreateInput!): Person!
  createTimeEstimate(data: TimeEstimateCreateInput!): TimeEstimate!
  createUnorderedListItem(data: UnorderedListItemCreateInput!): UnorderedListItem!
  createDuration: Duration!
  createImage(data: ImageCreateInput!): Image!
  createOrderedList(data: OrderedListCreateInput!): OrderedList!
  createOrderedListItem(data: OrderedListItemCreateInput!): OrderedListItem!
  createSection(data: SectionCreateInput!): Section!
  createPage(data: PageCreateInput!): Page!
  createTable(data: TableCreateInput!): Table!
  createUnorderedList(data: UnorderedListCreateInput!): UnorderedList!
  createContent(data: ContentCreateInput!): Content!
  updateLatitude(data: LatitudeUpdateInput!, where: LatitudeWhereUniqueInput!): Latitude
  updateLongitude(data: LongitudeUpdateInput!, where: LongitudeWhereUniqueInput!): Longitude
  updateUSState(data: USStateUpdateInput!, where: USStateWhereUniqueInput!): USState
  updateDocFile(data: DocFileUpdateInput!, where: DocFileWhereUniqueInput!): DocFile
  updateCountryCode(data: CountryCodeUpdateInput!, where: CountryCodeWhereUniqueInput!): CountryCode
  updateCategorical(data: CategoricalUpdateInput!, where: CategoricalWhereUniqueInput!): Categorical
  updateBooleanKind(data: BooleanKindUpdateInput!, where: BooleanKindWhereUniqueInput!): BooleanKind
  updateCurrency(data: CurrencyUpdateInput!, where: CurrencyWhereUniqueInput!): Currency
  updateDateKind(data: DateKindUpdateInput!, where: DateKindWhereUniqueInput!): DateKind
  updateTimeKind(data: TimeKindUpdateInput!, where: TimeKindWhereUniqueInput!): TimeKind
  updateGeoCoordinate(data: GeoCoordinateUpdateInput!, where: GeoCoordinateWhereUniqueInput!): GeoCoordinate
  updateSocialSecurityNumber(data: SocialSecurityNumberUpdateInput!, where: SocialSecurityNumberWhereUniqueInput!): SocialSecurityNumber
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateNumber(data: NumberUpdateInput!, where: NumberWhereUniqueInput!): Number
  updatePercentage(data: PercentageUpdateInput!, where: PercentageWhereUniqueInput!): Percentage
  updatePhoneNumber(data: PhoneNumberUpdateInput!, where: PhoneNumberWhereUniqueInput!): PhoneNumber
  updateEmail(data: EmailUpdateInput!, where: EmailWhereUniqueInput!): Email
  updateIpAddress(data: IpAddressUpdateInput!, where: IpAddressWhereUniqueInput!): IpAddress
  updateURL(data: URLUpdateInput!, where: URLWhereUniqueInput!): URL
  updatePhysicalQuantity(data: PhysicalQuantityUpdateInput!, where: PhysicalQuantityWhereUniqueInput!): PhysicalQuantity
  updateDocument(data: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateTimeEstimate(data: TimeEstimateUpdateInput!, where: TimeEstimateWhereUniqueInput!): TimeEstimate
  updateUnorderedListItem(data: UnorderedListItemUpdateInput!, where: UnorderedListItemWhereUniqueInput!): UnorderedListItem
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateOrderedList(data: OrderedListUpdateInput!, where: OrderedListWhereUniqueInput!): OrderedList
  updateOrderedListItem(data: OrderedListItemUpdateInput!, where: OrderedListItemWhereUniqueInput!): OrderedListItem
  updateSection(data: SectionUpdateInput!, where: SectionWhereUniqueInput!): Section
  updatePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  updateTable(data: TableUpdateInput!, where: TableWhereUniqueInput!): Table
  updateUnorderedList(data: UnorderedListUpdateInput!, where: UnorderedListWhereUniqueInput!): UnorderedList
  updateContent(data: ContentUpdateInput!, where: ContentWhereUniqueInput!): Content
  deleteLatitude(where: LatitudeWhereUniqueInput!): Latitude
  deleteLongitude(where: LongitudeWhereUniqueInput!): Longitude
  deleteUSState(where: USStateWhereUniqueInput!): USState
  deleteDocFile(where: DocFileWhereUniqueInput!): DocFile
  deleteCountryCode(where: CountryCodeWhereUniqueInput!): CountryCode
  deleteCategorical(where: CategoricalWhereUniqueInput!): Categorical
  deleteBooleanKind(where: BooleanKindWhereUniqueInput!): BooleanKind
  deleteCurrency(where: CurrencyWhereUniqueInput!): Currency
  deleteDateKind(where: DateKindWhereUniqueInput!): DateKind
  deleteTimeKind(where: TimeKindWhereUniqueInput!): TimeKind
  deleteGeoCoordinate(where: GeoCoordinateWhereUniqueInput!): GeoCoordinate
  deleteSocialSecurityNumber(where: SocialSecurityNumberWhereUniqueInput!): SocialSecurityNumber
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteNumber(where: NumberWhereUniqueInput!): Number
  deletePercentage(where: PercentageWhereUniqueInput!): Percentage
  deletePhoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  deleteEmail(where: EmailWhereUniqueInput!): Email
  deleteIpAddress(where: IpAddressWhereUniqueInput!): IpAddress
  deleteURL(where: URLWhereUniqueInput!): URL
  deletePhysicalQuantity(where: PhysicalQuantityWhereUniqueInput!): PhysicalQuantity
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteTimeEstimate(where: TimeEstimateWhereUniqueInput!): TimeEstimate
  deleteUnorderedListItem(where: UnorderedListItemWhereUniqueInput!): UnorderedListItem
  deleteDuration(where: DurationWhereUniqueInput!): Duration
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteOrderedList(where: OrderedListWhereUniqueInput!): OrderedList
  deleteOrderedListItem(where: OrderedListItemWhereUniqueInput!): OrderedListItem
  deleteSection(where: SectionWhereUniqueInput!): Section
  deletePage(where: PageWhereUniqueInput!): Page
  deleteTable(where: TableWhereUniqueInput!): Table
  deleteUnorderedList(where: UnorderedListWhereUniqueInput!): UnorderedList
  deleteContent(where: ContentWhereUniqueInput!): Content
  upsertLatitude(where: LatitudeWhereUniqueInput!, create: LatitudeCreateInput!, update: LatitudeUpdateInput!): Latitude!
  upsertLongitude(where: LongitudeWhereUniqueInput!, create: LongitudeCreateInput!, update: LongitudeUpdateInput!): Longitude!
  upsertUSState(where: USStateWhereUniqueInput!, create: USStateCreateInput!, update: USStateUpdateInput!): USState!
  upsertDocFile(where: DocFileWhereUniqueInput!, create: DocFileCreateInput!, update: DocFileUpdateInput!): DocFile!
  upsertCountryCode(where: CountryCodeWhereUniqueInput!, create: CountryCodeCreateInput!, update: CountryCodeUpdateInput!): CountryCode!
  upsertCategorical(where: CategoricalWhereUniqueInput!, create: CategoricalCreateInput!, update: CategoricalUpdateInput!): Categorical!
  upsertBooleanKind(where: BooleanKindWhereUniqueInput!, create: BooleanKindCreateInput!, update: BooleanKindUpdateInput!): BooleanKind!
  upsertCurrency(where: CurrencyWhereUniqueInput!, create: CurrencyCreateInput!, update: CurrencyUpdateInput!): Currency!
  upsertDateKind(where: DateKindWhereUniqueInput!, create: DateKindCreateInput!, update: DateKindUpdateInput!): DateKind!
  upsertTimeKind(where: TimeKindWhereUniqueInput!, create: TimeKindCreateInput!, update: TimeKindUpdateInput!): TimeKind!
  upsertGeoCoordinate(where: GeoCoordinateWhereUniqueInput!, create: GeoCoordinateCreateInput!, update: GeoCoordinateUpdateInput!): GeoCoordinate!
  upsertSocialSecurityNumber(where: SocialSecurityNumberWhereUniqueInput!, create: SocialSecurityNumberCreateInput!, update: SocialSecurityNumberUpdateInput!): SocialSecurityNumber!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertNumber(where: NumberWhereUniqueInput!, create: NumberCreateInput!, update: NumberUpdateInput!): Number!
  upsertPercentage(where: PercentageWhereUniqueInput!, create: PercentageCreateInput!, update: PercentageUpdateInput!): Percentage!
  upsertPhoneNumber(where: PhoneNumberWhereUniqueInput!, create: PhoneNumberCreateInput!, update: PhoneNumberUpdateInput!): PhoneNumber!
  upsertEmail(where: EmailWhereUniqueInput!, create: EmailCreateInput!, update: EmailUpdateInput!): Email!
  upsertIpAddress(where: IpAddressWhereUniqueInput!, create: IpAddressCreateInput!, update: IpAddressUpdateInput!): IpAddress!
  upsertURL(where: URLWhereUniqueInput!, create: URLCreateInput!, update: URLUpdateInput!): URL!
  upsertPhysicalQuantity(where: PhysicalQuantityWhereUniqueInput!, create: PhysicalQuantityCreateInput!, update: PhysicalQuantityUpdateInput!): PhysicalQuantity!
  upsertDocument(where: DocumentWhereUniqueInput!, create: DocumentCreateInput!, update: DocumentUpdateInput!): Document!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertTimeEstimate(where: TimeEstimateWhereUniqueInput!, create: TimeEstimateCreateInput!, update: TimeEstimateUpdateInput!): TimeEstimate!
  upsertUnorderedListItem(where: UnorderedListItemWhereUniqueInput!, create: UnorderedListItemCreateInput!, update: UnorderedListItemUpdateInput!): UnorderedListItem!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  upsertOrderedList(where: OrderedListWhereUniqueInput!, create: OrderedListCreateInput!, update: OrderedListUpdateInput!): OrderedList!
  upsertOrderedListItem(where: OrderedListItemWhereUniqueInput!, create: OrderedListItemCreateInput!, update: OrderedListItemUpdateInput!): OrderedListItem!
  upsertSection(where: SectionWhereUniqueInput!, create: SectionCreateInput!, update: SectionUpdateInput!): Section!
  upsertPage(where: PageWhereUniqueInput!, create: PageCreateInput!, update: PageUpdateInput!): Page!
  upsertTable(where: TableWhereUniqueInput!, create: TableCreateInput!, update: TableUpdateInput!): Table!
  upsertUnorderedList(where: UnorderedListWhereUniqueInput!, create: UnorderedListCreateInput!, update: UnorderedListUpdateInput!): UnorderedList!
  upsertContent(where: ContentWhereUniqueInput!, create: ContentCreateInput!, update: ContentUpdateInput!): Content!
  updateManyLatitudes(data: LatitudeUpdateInput!, where: LatitudeWhereInput): BatchPayload!
  updateManyLongitudes(data: LongitudeUpdateInput!, where: LongitudeWhereInput): BatchPayload!
  updateManyUSStates(data: USStateUpdateInput!, where: USStateWhereInput): BatchPayload!
  updateManyDocFiles(data: DocFileUpdateInput!, where: DocFileWhereInput): BatchPayload!
  updateManyCountryCodes(data: CountryCodeUpdateInput!, where: CountryCodeWhereInput): BatchPayload!
  updateManyCategoricals(data: CategoricalUpdateInput!, where: CategoricalWhereInput): BatchPayload!
  updateManyBooleanKinds(data: BooleanKindUpdateInput!, where: BooleanKindWhereInput): BatchPayload!
  updateManyCurrencies(data: CurrencyUpdateInput!, where: CurrencyWhereInput): BatchPayload!
  updateManyDateKinds(data: DateKindUpdateInput!, where: DateKindWhereInput): BatchPayload!
  updateManyTimeKinds(data: TimeKindUpdateInput!, where: TimeKindWhereInput): BatchPayload!
  updateManyGeoCoordinates(data: GeoCoordinateUpdateInput!, where: GeoCoordinateWhereInput): BatchPayload!
  updateManySocialSecurityNumbers(data: SocialSecurityNumberUpdateInput!, where: SocialSecurityNumberWhereInput): BatchPayload!
  updateManyOrganizations(data: OrganizationUpdateInput!, where: OrganizationWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateInput!, where: LocationWhereInput): BatchPayload!
  updateManyNumbers(data: NumberUpdateInput!, where: NumberWhereInput): BatchPayload!
  updateManyPercentages(data: PercentageUpdateInput!, where: PercentageWhereInput): BatchPayload!
  updateManyPhoneNumbers(data: PhoneNumberUpdateInput!, where: PhoneNumberWhereInput): BatchPayload!
  updateManyEmails(data: EmailUpdateInput!, where: EmailWhereInput): BatchPayload!
  updateManyIpAddresses(data: IpAddressUpdateInput!, where: IpAddressWhereInput): BatchPayload!
  updateManyURLs(data: URLUpdateInput!, where: URLWhereInput): BatchPayload!
  updateManyPhysicalQuantities(data: PhysicalQuantityUpdateInput!, where: PhysicalQuantityWhereInput): BatchPayload!
  updateManyDocuments(data: DocumentUpdateInput!, where: DocumentWhereInput): BatchPayload!
  updateManyPersons(data: PersonUpdateInput!, where: PersonWhereInput): BatchPayload!
  updateManyTimeEstimates(data: TimeEstimateUpdateInput!, where: TimeEstimateWhereInput): BatchPayload!
  updateManyUnorderedListItems(data: UnorderedListItemUpdateInput!, where: UnorderedListItemWhereInput): BatchPayload!
  updateManyImages(data: ImageUpdateInput!, where: ImageWhereInput): BatchPayload!
  updateManyOrderedLists(data: OrderedListUpdateInput!, where: OrderedListWhereInput): BatchPayload!
  updateManyOrderedListItems(data: OrderedListItemUpdateInput!, where: OrderedListItemWhereInput): BatchPayload!
  updateManySections(data: SectionUpdateInput!, where: SectionWhereInput): BatchPayload!
  updateManyPages(data: PageUpdateInput!, where: PageWhereInput): BatchPayload!
  updateManyTables(data: TableUpdateInput!, where: TableWhereInput): BatchPayload!
  updateManyUnorderedLists(data: UnorderedListUpdateInput!, where: UnorderedListWhereInput): BatchPayload!
  updateManyContents(data: ContentUpdateInput!, where: ContentWhereInput): BatchPayload!
  deleteManyLatitudes(where: LatitudeWhereInput): BatchPayload!
  deleteManyLongitudes(where: LongitudeWhereInput): BatchPayload!
  deleteManyUSStates(where: USStateWhereInput): BatchPayload!
  deleteManyDocFiles(where: DocFileWhereInput): BatchPayload!
  deleteManyCountryCodes(where: CountryCodeWhereInput): BatchPayload!
  deleteManyCategoricals(where: CategoricalWhereInput): BatchPayload!
  deleteManyBooleanKinds(where: BooleanKindWhereInput): BatchPayload!
  deleteManyCurrencies(where: CurrencyWhereInput): BatchPayload!
  deleteManyDateKinds(where: DateKindWhereInput): BatchPayload!
  deleteManyTimeKinds(where: TimeKindWhereInput): BatchPayload!
  deleteManyGeoCoordinates(where: GeoCoordinateWhereInput): BatchPayload!
  deleteManySocialSecurityNumbers(where: SocialSecurityNumberWhereInput): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyNumbers(where: NumberWhereInput): BatchPayload!
  deleteManyPercentages(where: PercentageWhereInput): BatchPayload!
  deleteManyPhoneNumbers(where: PhoneNumberWhereInput): BatchPayload!
  deleteManyEmails(where: EmailWhereInput): BatchPayload!
  deleteManyIpAddresses(where: IpAddressWhereInput): BatchPayload!
  deleteManyURLs(where: URLWhereInput): BatchPayload!
  deleteManyPhysicalQuantities(where: PhysicalQuantityWhereInput): BatchPayload!
  deleteManyDocuments(where: DocumentWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  deleteManyTimeEstimates(where: TimeEstimateWhereInput): BatchPayload!
  deleteManyUnorderedListItems(where: UnorderedListItemWhereInput): BatchPayload!
  deleteManyDurations(where: DurationWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  deleteManyOrderedLists(where: OrderedListWhereInput): BatchPayload!
  deleteManyOrderedListItems(where: OrderedListItemWhereInput): BatchPayload!
  deleteManySections(where: SectionWhereInput): BatchPayload!
  deleteManyPages(where: PageWhereInput): BatchPayload!
  deleteManyTables(where: TableWhereInput): BatchPayload!
  deleteManyUnorderedLists(where: UnorderedListWhereInput): BatchPayload!
  deleteManyContents(where: ContentWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Number implements Node {
  id: ID!
  name: String!
  value: Float
}

"""A connection to a list of items."""
type NumberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NumberEdge]!
  aggregate: AggregateNumber!
}

input NumberCreateInput {
  name: String!
  value: Float
}

"""An edge in a connection."""
type NumberEdge {
  """The item at the end of the edge."""
  node: Number!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NumberOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NumberPreviousValues {
  id: ID!
  name: String!
  value: Float
}

type NumberSubscriptionPayload {
  mutation: MutationType!
  node: Number
  updatedFields: [String!]
  previousValues: NumberPreviousValues
}

input NumberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NumberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NumberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NumberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NumberWhereInput
}

input NumberUpdateInput {
  name: String
  value: Float
}

input NumberWhereInput {
  """Logical AND on all given filters."""
  AND: [NumberWhereInput!]

  """Logical OR on all given filters."""
  OR: [NumberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NumberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
}

input NumberWhereUniqueInput {
  id: ID
}

type OrderedList implements Node {
  id: ID!
  type: String
  items(where: OrderedListItemWhereInput, orderBy: OrderedListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderedListItem!]
}

"""A connection to a list of items."""
type OrderedListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderedListEdge]!
  aggregate: AggregateOrderedList!
}

input OrderedListCreateInput {
  type: String
  items: OrderedListItemCreateManyInput
}

input OrderedListCreateOneInput {
  create: OrderedListCreateInput
  connect: OrderedListWhereUniqueInput
}

"""An edge in a connection."""
type OrderedListEdge {
  """The item at the end of the edge."""
  node: OrderedList!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderedListItem implements Node {
  id: ID!
  index: Int
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
}

"""A connection to a list of items."""
type OrderedListItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderedListItemEdge]!
  aggregate: AggregateOrderedListItem!
}

input OrderedListItemCreateInput {
  index: Int
  contents: ContentCreateManyInput
}

input OrderedListItemCreateManyInput {
  create: [OrderedListItemCreateInput!]
  connect: [OrderedListItemWhereUniqueInput!]
}

"""An edge in a connection."""
type OrderedListItemEdge {
  """The item at the end of the edge."""
  node: OrderedListItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderedListItemOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderedListItemPreviousValues {
  id: ID!
  index: Int
}

type OrderedListItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderedListItem
  updatedFields: [String!]
  previousValues: OrderedListItemPreviousValues
}

input OrderedListItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderedListItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderedListItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderedListItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderedListItemWhereInput
}

input OrderedListItemUpdateDataInput {
  index: Int
  contents: ContentUpdateManyInput
}

input OrderedListItemUpdateInput {
  index: Int
  contents: ContentUpdateManyInput
}

input OrderedListItemUpdateManyInput {
  create: [OrderedListItemCreateInput!]
  connect: [OrderedListItemWhereUniqueInput!]
  disconnect: [OrderedListItemWhereUniqueInput!]
  delete: [OrderedListItemWhereUniqueInput!]
  update: [OrderedListItemUpdateWithWhereUniqueNestedInput!]
  upsert: [OrderedListItemUpsertWithWhereUniqueNestedInput!]
}

input OrderedListItemUpdateWithWhereUniqueNestedInput {
  where: OrderedListItemWhereUniqueInput!
  data: OrderedListItemUpdateDataInput!
}

input OrderedListItemUpsertWithWhereUniqueNestedInput {
  where: OrderedListItemWhereUniqueInput!
  update: OrderedListItemUpdateDataInput!
  create: OrderedListItemCreateInput!
}

input OrderedListItemWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderedListItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderedListItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderedListItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  index: Int

  """All values that are not equal to given value."""
  index_not: Int

  """All values that are contained in given list."""
  index_in: [Int!]

  """All values that are not contained in given list."""
  index_not_in: [Int!]

  """All values less than the given value."""
  index_lt: Int

  """All values less than or equal the given value."""
  index_lte: Int

  """All values greater than the given value."""
  index_gt: Int

  """All values greater than or equal the given value."""
  index_gte: Int
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  _MagicalBackRelation_OrderedListToOrderedListItem_every: OrderedListWhereInput
  _MagicalBackRelation_OrderedListToOrderedListItem_some: OrderedListWhereInput
  _MagicalBackRelation_OrderedListToOrderedListItem_none: OrderedListWhereInput
}

input OrderedListItemWhereUniqueInput {
  id: ID
}

enum OrderedListOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderedListPreviousValues {
  id: ID!
  type: String
}

type OrderedListSubscriptionPayload {
  mutation: MutationType!
  node: OrderedList
  updatedFields: [String!]
  previousValues: OrderedListPreviousValues
}

input OrderedListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderedListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderedListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderedListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderedListWhereInput
}

input OrderedListUpdateDataInput {
  type: String
  items: OrderedListItemUpdateManyInput
}

input OrderedListUpdateInput {
  type: String
  items: OrderedListItemUpdateManyInput
}

input OrderedListUpdateOneInput {
  create: OrderedListCreateInput
  connect: OrderedListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderedListUpdateDataInput
  upsert: OrderedListUpsertNestedInput
}

input OrderedListUpsertNestedInput {
  update: OrderedListUpdateDataInput!
  create: OrderedListCreateInput!
}

input OrderedListWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderedListWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderedListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderedListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  items_every: OrderedListItemWhereInput
  items_some: OrderedListItemWhereInput
  items_none: OrderedListItemWhereInput
  _MagicalBackRelation_ContentToOrderedList_every: ContentWhereInput
  _MagicalBackRelation_ContentToOrderedList_some: ContentWhereInput
  _MagicalBackRelation_ContentToOrderedList_none: ContentWhereInput
}

input OrderedListWhereUniqueInput {
  id: ID
}

type Organization implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type OrganizationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  name: String!
}

"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge."""
  node: Organization!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
}

input OrganizationUpdateInput {
  name: String
}

input OrganizationWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input OrganizationWhereUniqueInput {
  id: ID
}

type Page implements Node {
  id: ID!
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  number: Int
  header(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  footer(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
}

"""A connection to a list of items."""
type PageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageEdge]!
  aggregate: AggregatePage!
}

input PageCreateInput {
  number: Int
  contents: ContentCreateManyInput
  header: ContentCreateManyInput
  footer: ContentCreateManyInput
}

input PageCreateManyInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

"""An edge in a connection."""
type PageEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PageOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PagePreviousValues {
  id: ID!
  number: Int
}

type PageSubscriptionPayload {
  mutation: MutationType!
  node: Page
  updatedFields: [String!]
  previousValues: PagePreviousValues
}

input PageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PageWhereInput
}

input PageUpdateDataInput {
  number: Int
  contents: ContentUpdateManyInput
  header: ContentUpdateManyInput
  footer: ContentUpdateManyInput
}

input PageUpdateInput {
  number: Int
  contents: ContentUpdateManyInput
  header: ContentUpdateManyInput
  footer: ContentUpdateManyInput
}

input PageUpdateManyInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  delete: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueNestedInput!]
  upsert: [PageUpsertWithWhereUniqueNestedInput!]
}

input PageUpdateWithWhereUniqueNestedInput {
  where: PageWhereUniqueInput!
  data: PageUpdateDataInput!
}

input PageUpsertWithWhereUniqueNestedInput {
  where: PageWhereUniqueInput!
  update: PageUpdateDataInput!
  create: PageCreateInput!
}

input PageWhereInput {
  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  header_every: ContentWhereInput
  header_some: ContentWhereInput
  header_none: ContentWhereInput
  footer_every: ContentWhereInput
  footer_some: ContentWhereInput
  footer_none: ContentWhereInput
  _MagicalBackRelation_DocumentToPage_every: DocumentWhereInput
  _MagicalBackRelation_DocumentToPage_some: DocumentWhereInput
  _MagicalBackRelation_DocumentToPage_none: DocumentWhereInput
}

input PageWhereUniqueInput {
  id: ID
}

type Percentage implements Node {
  id: ID!
  name: String!
  value: Float
}

"""A connection to a list of items."""
type PercentageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PercentageEdge]!
  aggregate: AggregatePercentage!
}

input PercentageCreateInput {
  name: String!
  value: Float
}

"""An edge in a connection."""
type PercentageEdge {
  """The item at the end of the edge."""
  node: Percentage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PercentageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PercentagePreviousValues {
  id: ID!
  name: String!
  value: Float
}

type PercentageSubscriptionPayload {
  mutation: MutationType!
  node: Percentage
  updatedFields: [String!]
  previousValues: PercentagePreviousValues
}

input PercentageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PercentageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PercentageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PercentageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PercentageWhereInput
}

input PercentageUpdateInput {
  name: String
  value: Float
}

input PercentageWhereInput {
  """Logical AND on all given filters."""
  AND: [PercentageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PercentageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PercentageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
}

input PercentageWhereUniqueInput {
  id: ID
}

type Person implements Node {
  id: ID!
  name: String!
  givenName: String
  familyName: String
  dateOfBirth: DateTime
  age: Int
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  name: String!
  givenName: String
  familyName: String
  dateOfBirth: DateTime
  age: Int
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  givenName_ASC
  givenName_DESC
  familyName_ASC
  familyName_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  age_ASC
  age_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  name: String!
  givenName: String
  familyName: String
  dateOfBirth: DateTime
  age: Int
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  name: String
  givenName: String
  familyName: String
  dateOfBirth: DateTime
  age: Int
}

input PersonWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  givenName: String

  """All values that are not equal to given value."""
  givenName_not: String

  """All values that are contained in given list."""
  givenName_in: [String!]

  """All values that are not contained in given list."""
  givenName_not_in: [String!]

  """All values less than the given value."""
  givenName_lt: String

  """All values less than or equal the given value."""
  givenName_lte: String

  """All values greater than the given value."""
  givenName_gt: String

  """All values greater than or equal the given value."""
  givenName_gte: String

  """All values containing the given string."""
  givenName_contains: String

  """All values not containing the given string."""
  givenName_not_contains: String

  """All values starting with the given string."""
  givenName_starts_with: String

  """All values not starting with the given string."""
  givenName_not_starts_with: String

  """All values ending with the given string."""
  givenName_ends_with: String

  """All values not ending with the given string."""
  givenName_not_ends_with: String
  familyName: String

  """All values that are not equal to given value."""
  familyName_not: String

  """All values that are contained in given list."""
  familyName_in: [String!]

  """All values that are not contained in given list."""
  familyName_not_in: [String!]

  """All values less than the given value."""
  familyName_lt: String

  """All values less than or equal the given value."""
  familyName_lte: String

  """All values greater than the given value."""
  familyName_gt: String

  """All values greater than or equal the given value."""
  familyName_gte: String

  """All values containing the given string."""
  familyName_contains: String

  """All values not containing the given string."""
  familyName_not_contains: String

  """All values starting with the given string."""
  familyName_starts_with: String

  """All values not starting with the given string."""
  familyName_not_starts_with: String

  """All values ending with the given string."""
  familyName_ends_with: String

  """All values not ending with the given string."""
  familyName_not_ends_with: String
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
}

input PersonWhereUniqueInput {
  id: ID
}

type PhoneNumber implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type PhoneNumberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhoneNumberEdge]!
  aggregate: AggregatePhoneNumber!
}

input PhoneNumberCreateInput {
  name: String!
}

"""An edge in a connection."""
type PhoneNumberEdge {
  """The item at the end of the edge."""
  node: PhoneNumber!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhoneNumberOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhoneNumberPreviousValues {
  id: ID!
  name: String!
}

type PhoneNumberSubscriptionPayload {
  mutation: MutationType!
  node: PhoneNumber
  updatedFields: [String!]
  previousValues: PhoneNumberPreviousValues
}

input PhoneNumberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhoneNumberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhoneNumberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhoneNumberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhoneNumberWhereInput
}

input PhoneNumberUpdateInput {
  name: String
}

input PhoneNumberWhereInput {
  """Logical AND on all given filters."""
  AND: [PhoneNumberWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhoneNumberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhoneNumberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input PhoneNumberWhereUniqueInput {
  id: ID
}

type PhysicalQuantity implements Node {
  id: ID!
  name: String!
  magnitude: String!
  unit: String!
  dimension: String!
}

"""A connection to a list of items."""
type PhysicalQuantityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhysicalQuantityEdge]!
  aggregate: AggregatePhysicalQuantity!
}

input PhysicalQuantityCreateInput {
  name: String!
  magnitude: String!
  unit: String!
  dimension: String!
}

"""An edge in a connection."""
type PhysicalQuantityEdge {
  """The item at the end of the edge."""
  node: PhysicalQuantity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhysicalQuantityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  magnitude_ASC
  magnitude_DESC
  unit_ASC
  unit_DESC
  dimension_ASC
  dimension_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhysicalQuantityPreviousValues {
  id: ID!
  name: String!
  magnitude: String!
  unit: String!
  dimension: String!
}

type PhysicalQuantitySubscriptionPayload {
  mutation: MutationType!
  node: PhysicalQuantity
  updatedFields: [String!]
  previousValues: PhysicalQuantityPreviousValues
}

input PhysicalQuantitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhysicalQuantitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhysicalQuantitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhysicalQuantitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhysicalQuantityWhereInput
}

input PhysicalQuantityUpdateInput {
  name: String
  magnitude: String
  unit: String
  dimension: String
}

input PhysicalQuantityWhereInput {
  """Logical AND on all given filters."""
  AND: [PhysicalQuantityWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhysicalQuantityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhysicalQuantityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  magnitude: String

  """All values that are not equal to given value."""
  magnitude_not: String

  """All values that are contained in given list."""
  magnitude_in: [String!]

  """All values that are not contained in given list."""
  magnitude_not_in: [String!]

  """All values less than the given value."""
  magnitude_lt: String

  """All values less than or equal the given value."""
  magnitude_lte: String

  """All values greater than the given value."""
  magnitude_gt: String

  """All values greater than or equal the given value."""
  magnitude_gte: String

  """All values containing the given string."""
  magnitude_contains: String

  """All values not containing the given string."""
  magnitude_not_contains: String

  """All values starting with the given string."""
  magnitude_starts_with: String

  """All values not starting with the given string."""
  magnitude_not_starts_with: String

  """All values ending with the given string."""
  magnitude_ends_with: String

  """All values not ending with the given string."""
  magnitude_not_ends_with: String
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  dimension: String

  """All values that are not equal to given value."""
  dimension_not: String

  """All values that are contained in given list."""
  dimension_in: [String!]

  """All values that are not contained in given list."""
  dimension_not_in: [String!]

  """All values less than the given value."""
  dimension_lt: String

  """All values less than or equal the given value."""
  dimension_lte: String

  """All values greater than the given value."""
  dimension_gt: String

  """All values greater than or equal the given value."""
  dimension_gte: String

  """All values containing the given string."""
  dimension_contains: String

  """All values not containing the given string."""
  dimension_not_contains: String

  """All values starting with the given string."""
  dimension_starts_with: String

  """All values not starting with the given string."""
  dimension_not_starts_with: String

  """All values ending with the given string."""
  dimension_ends_with: String

  """All values not ending with the given string."""
  dimension_not_ends_with: String
}

input PhysicalQuantityWhereUniqueInput {
  id: ID
}

type Query {
  latitudes(where: LatitudeWhereInput, orderBy: LatitudeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Latitude]!
  longitudes(where: LongitudeWhereInput, orderBy: LongitudeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Longitude]!
  uSStates(where: USStateWhereInput, orderBy: USStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [USState]!
  docFiles(where: DocFileWhereInput, orderBy: DocFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocFile]!
  countryCodes(where: CountryCodeWhereInput, orderBy: CountryCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CountryCode]!
  categoricals(where: CategoricalWhereInput, orderBy: CategoricalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Categorical]!
  booleanKinds(where: BooleanKindWhereInput, orderBy: BooleanKindOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BooleanKind]!
  currencies(where: CurrencyWhereInput, orderBy: CurrencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Currency]!
  dateKinds(where: DateKindWhereInput, orderBy: DateKindOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DateKind]!
  timeKinds(where: TimeKindWhereInput, orderBy: TimeKindOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeKind]!
  geoCoordinates(where: GeoCoordinateWhereInput, orderBy: GeoCoordinateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GeoCoordinate]!
  socialSecurityNumbers(where: SocialSecurityNumberWhereInput, orderBy: SocialSecurityNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialSecurityNumber]!
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  numbers(where: NumberWhereInput, orderBy: NumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Number]!
  percentages(where: PercentageWhereInput, orderBy: PercentageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Percentage]!
  phoneNumbers(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhoneNumber]!
  emails(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Email]!
  ipAddresses(where: IpAddressWhereInput, orderBy: IpAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IpAddress]!
  uRLs(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [URL]!
  physicalQuantities(where: PhysicalQuantityWhereInput, orderBy: PhysicalQuantityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalQuantity]!
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document]!
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  timeEstimates(where: TimeEstimateWhereInput, orderBy: TimeEstimateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeEstimate]!
  unorderedListItems(where: UnorderedListItemWhereInput, orderBy: UnorderedListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UnorderedListItem]!
  durations(where: DurationWhereInput, orderBy: DurationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Duration]!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  orderedLists(where: OrderedListWhereInput, orderBy: OrderedListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderedList]!
  orderedListItems(where: OrderedListItemWhereInput, orderBy: OrderedListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderedListItem]!
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section]!
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page]!
  tables(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Table]!
  unorderedLists(where: UnorderedListWhereInput, orderBy: UnorderedListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UnorderedList]!
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content]!
  latitude(where: LatitudeWhereUniqueInput!): Latitude
  longitude(where: LongitudeWhereUniqueInput!): Longitude
  uSState(where: USStateWhereUniqueInput!): USState
  docFile(where: DocFileWhereUniqueInput!): DocFile
  countryCode(where: CountryCodeWhereUniqueInput!): CountryCode
  categorical(where: CategoricalWhereUniqueInput!): Categorical
  booleanKind(where: BooleanKindWhereUniqueInput!): BooleanKind
  currency(where: CurrencyWhereUniqueInput!): Currency
  dateKind(where: DateKindWhereUniqueInput!): DateKind
  timeKind(where: TimeKindWhereUniqueInput!): TimeKind
  geoCoordinate(where: GeoCoordinateWhereUniqueInput!): GeoCoordinate
  socialSecurityNumber(where: SocialSecurityNumberWhereUniqueInput!): SocialSecurityNumber
  organization(where: OrganizationWhereUniqueInput!): Organization
  location(where: LocationWhereUniqueInput!): Location
  number(where: NumberWhereUniqueInput!): Number
  percentage(where: PercentageWhereUniqueInput!): Percentage
  phoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  email(where: EmailWhereUniqueInput!): Email
  ipAddress(where: IpAddressWhereUniqueInput!): IpAddress
  uRL(where: URLWhereUniqueInput!): URL
  physicalQuantity(where: PhysicalQuantityWhereUniqueInput!): PhysicalQuantity
  document(where: DocumentWhereUniqueInput!): Document
  person(where: PersonWhereUniqueInput!): Person
  timeEstimate(where: TimeEstimateWhereUniqueInput!): TimeEstimate
  unorderedListItem(where: UnorderedListItemWhereUniqueInput!): UnorderedListItem
  duration(where: DurationWhereUniqueInput!): Duration
  image(where: ImageWhereUniqueInput!): Image
  orderedList(where: OrderedListWhereUniqueInput!): OrderedList
  orderedListItem(where: OrderedListItemWhereUniqueInput!): OrderedListItem
  section(where: SectionWhereUniqueInput!): Section
  page(where: PageWhereUniqueInput!): Page
  table(where: TableWhereUniqueInput!): Table
  unorderedList(where: UnorderedListWhereUniqueInput!): UnorderedList
  content(where: ContentWhereUniqueInput!): Content
  latitudesConnection(where: LatitudeWhereInput, orderBy: LatitudeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LatitudeConnection!
  longitudesConnection(where: LongitudeWhereInput, orderBy: LongitudeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LongitudeConnection!
  uSStatesConnection(where: USStateWhereInput, orderBy: USStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): USStateConnection!
  docFilesConnection(where: DocFileWhereInput, orderBy: DocFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocFileConnection!
  countryCodesConnection(where: CountryCodeWhereInput, orderBy: CountryCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryCodeConnection!
  categoricalsConnection(where: CategoricalWhereInput, orderBy: CategoricalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoricalConnection!
  booleanKindsConnection(where: BooleanKindWhereInput, orderBy: BooleanKindOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BooleanKindConnection!
  currenciesConnection(where: CurrencyWhereInput, orderBy: CurrencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CurrencyConnection!
  dateKindsConnection(where: DateKindWhereInput, orderBy: DateKindOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DateKindConnection!
  timeKindsConnection(where: TimeKindWhereInput, orderBy: TimeKindOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeKindConnection!
  geoCoordinatesConnection(where: GeoCoordinateWhereInput, orderBy: GeoCoordinateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GeoCoordinateConnection!
  socialSecurityNumbersConnection(where: SocialSecurityNumberWhereInput, orderBy: SocialSecurityNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialSecurityNumberConnection!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  numbersConnection(where: NumberWhereInput, orderBy: NumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NumberConnection!
  percentagesConnection(where: PercentageWhereInput, orderBy: PercentageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PercentageConnection!
  phoneNumbersConnection(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhoneNumberConnection!
  emailsConnection(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmailConnection!
  ipAddressesConnection(where: IpAddressWhereInput, orderBy: IpAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IpAddressConnection!
  uRLsConnection(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): URLConnection!
  physicalQuantitiesConnection(where: PhysicalQuantityWhereInput, orderBy: PhysicalQuantityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhysicalQuantityConnection!
  documentsConnection(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentConnection!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  timeEstimatesConnection(where: TimeEstimateWhereInput, orderBy: TimeEstimateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeEstimateConnection!
  unorderedListItemsConnection(where: UnorderedListItemWhereInput, orderBy: UnorderedListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UnorderedListItemConnection!
  durationsConnection(where: DurationWhereInput, orderBy: DurationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DurationConnection!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  orderedListsConnection(where: OrderedListWhereInput, orderBy: OrderedListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderedListConnection!
  orderedListItemsConnection(where: OrderedListItemWhereInput, orderBy: OrderedListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderedListItemConnection!
  sectionsConnection(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectionConnection!
  pagesConnection(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageConnection!
  tablesConnection(where: TableWhereInput, orderBy: TableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TableConnection!
  unorderedListsConnection(where: UnorderedListWhereInput, orderBy: UnorderedListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UnorderedListConnection!
  contentsConnection(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContentConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Section implements Node {
  id: ID!
  name: String
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  subSections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section!]
}

"""A connection to a list of items."""
type SectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SectionEdge]!
  aggregate: AggregateSection!
}

input SectionCreateInput {
  name: String
  contents: ContentCreateManyInput
  subSections: SectionCreateManyInput
}

input SectionCreateManyInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

"""An edge in a connection."""
type SectionEdge {
  """The item at the end of the edge."""
  node: Section!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SectionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SectionPreviousValues {
  id: ID!
  name: String
}

type SectionSubscriptionPayload {
  mutation: MutationType!
  node: Section
  updatedFields: [String!]
  previousValues: SectionPreviousValues
}

input SectionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SectionWhereInput
}

input SectionUpdateDataInput {
  name: String
  contents: ContentUpdateManyInput
  subSections: SectionUpdateManyInput
}

input SectionUpdateInput {
  name: String
  contents: ContentUpdateManyInput
  subSections: SectionUpdateManyInput
}

input SectionUpdateManyInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
  disconnect: [SectionWhereUniqueInput!]
  delete: [SectionWhereUniqueInput!]
  update: [SectionUpdateWithWhereUniqueNestedInput!]
  upsert: [SectionUpsertWithWhereUniqueNestedInput!]
}

input SectionUpdateWithWhereUniqueNestedInput {
  where: SectionWhereUniqueInput!
  data: SectionUpdateDataInput!
}

input SectionUpsertWithWhereUniqueNestedInput {
  where: SectionWhereUniqueInput!
  update: SectionUpdateDataInput!
  create: SectionCreateInput!
}

input SectionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  subSections_every: SectionWhereInput
  subSections_some: SectionWhereInput
  subSections_none: SectionWhereInput
  _MagicalBackRelation_SectionToSection_every: SectionWhereInput
  _MagicalBackRelation_SectionToSection_some: SectionWhereInput
  _MagicalBackRelation_SectionToSection_none: SectionWhereInput
  _MagicalBackRelation_DocumentToSection_every: DocumentWhereInput
  _MagicalBackRelation_DocumentToSection_some: DocumentWhereInput
  _MagicalBackRelation_DocumentToSection_none: DocumentWhereInput
}

input SectionWhereUniqueInput {
  id: ID
}

type SocialSecurityNumber implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type SocialSecurityNumberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SocialSecurityNumberEdge]!
  aggregate: AggregateSocialSecurityNumber!
}

input SocialSecurityNumberCreateInput {
  name: String!
}

"""An edge in a connection."""
type SocialSecurityNumberEdge {
  """The item at the end of the edge."""
  node: SocialSecurityNumber!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SocialSecurityNumberOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SocialSecurityNumberPreviousValues {
  id: ID!
  name: String!
}

type SocialSecurityNumberSubscriptionPayload {
  mutation: MutationType!
  node: SocialSecurityNumber
  updatedFields: [String!]
  previousValues: SocialSecurityNumberPreviousValues
}

input SocialSecurityNumberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialSecurityNumberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialSecurityNumberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialSecurityNumberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SocialSecurityNumberWhereInput
}

input SocialSecurityNumberUpdateInput {
  name: String
}

input SocialSecurityNumberWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialSecurityNumberWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialSecurityNumberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialSecurityNumberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input SocialSecurityNumberWhereUniqueInput {
  id: ID
}

type Subscription {
  latitude(where: LatitudeSubscriptionWhereInput): LatitudeSubscriptionPayload
  longitude(where: LongitudeSubscriptionWhereInput): LongitudeSubscriptionPayload
  uSState(where: USStateSubscriptionWhereInput): USStateSubscriptionPayload
  docFile(where: DocFileSubscriptionWhereInput): DocFileSubscriptionPayload
  countryCode(where: CountryCodeSubscriptionWhereInput): CountryCodeSubscriptionPayload
  categorical(where: CategoricalSubscriptionWhereInput): CategoricalSubscriptionPayload
  booleanKind(where: BooleanKindSubscriptionWhereInput): BooleanKindSubscriptionPayload
  currency(where: CurrencySubscriptionWhereInput): CurrencySubscriptionPayload
  dateKind(where: DateKindSubscriptionWhereInput): DateKindSubscriptionPayload
  timeKind(where: TimeKindSubscriptionWhereInput): TimeKindSubscriptionPayload
  geoCoordinate(where: GeoCoordinateSubscriptionWhereInput): GeoCoordinateSubscriptionPayload
  socialSecurityNumber(where: SocialSecurityNumberSubscriptionWhereInput): SocialSecurityNumberSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  number(where: NumberSubscriptionWhereInput): NumberSubscriptionPayload
  percentage(where: PercentageSubscriptionWhereInput): PercentageSubscriptionPayload
  phoneNumber(where: PhoneNumberSubscriptionWhereInput): PhoneNumberSubscriptionPayload
  email(where: EmailSubscriptionWhereInput): EmailSubscriptionPayload
  ipAddress(where: IpAddressSubscriptionWhereInput): IpAddressSubscriptionPayload
  uRL(where: URLSubscriptionWhereInput): URLSubscriptionPayload
  physicalQuantity(where: PhysicalQuantitySubscriptionWhereInput): PhysicalQuantitySubscriptionPayload
  document(where: DocumentSubscriptionWhereInput): DocumentSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  timeEstimate(where: TimeEstimateSubscriptionWhereInput): TimeEstimateSubscriptionPayload
  unorderedListItem(where: UnorderedListItemSubscriptionWhereInput): UnorderedListItemSubscriptionPayload
  duration(where: DurationSubscriptionWhereInput): DurationSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  orderedList(where: OrderedListSubscriptionWhereInput): OrderedListSubscriptionPayload
  orderedListItem(where: OrderedListItemSubscriptionWhereInput): OrderedListItemSubscriptionPayload
  section(where: SectionSubscriptionWhereInput): SectionSubscriptionPayload
  page(where: PageSubscriptionWhereInput): PageSubscriptionPayload
  table(where: TableSubscriptionWhereInput): TableSubscriptionPayload
  unorderedList(where: UnorderedListSubscriptionWhereInput): UnorderedListSubscriptionPayload
  content(where: ContentSubscriptionWhereInput): ContentSubscriptionPayload
}

type Table implements Node {
  id: ID!
  headers(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  rows(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
}

"""A connection to a list of items."""
type TableConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TableEdge]!
  aggregate: AggregateTable!
}

input TableCreateInput {
  headers: ContentCreateManyInput
  rows: ContentCreateManyInput
}

input TableCreateOneInput {
  create: TableCreateInput
  connect: TableWhereUniqueInput
}

"""An edge in a connection."""
type TableEdge {
  """The item at the end of the edge."""
  node: Table!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TableOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TablePreviousValues {
  id: ID!
}

type TableSubscriptionPayload {
  mutation: MutationType!
  node: Table
  updatedFields: [String!]
  previousValues: TablePreviousValues
}

input TableSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TableSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TableSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TableSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TableWhereInput
}

input TableUpdateDataInput {
  headers: ContentUpdateManyInput
  rows: ContentUpdateManyInput
}

input TableUpdateInput {
  headers: ContentUpdateManyInput
  rows: ContentUpdateManyInput
}

input TableUpdateOneInput {
  create: TableCreateInput
  connect: TableWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TableUpdateDataInput
  upsert: TableUpsertNestedInput
}

input TableUpsertNestedInput {
  update: TableUpdateDataInput!
  create: TableCreateInput!
}

input TableWhereInput {
  """Logical AND on all given filters."""
  AND: [TableWhereInput!]

  """Logical OR on all given filters."""
  OR: [TableWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TableWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  headers_every: ContentWhereInput
  headers_some: ContentWhereInput
  headers_none: ContentWhereInput
  rows_every: ContentWhereInput
  rows_some: ContentWhereInput
  rows_none: ContentWhereInput
  _MagicalBackRelation_ContentTable_every: ContentWhereInput
  _MagicalBackRelation_ContentTable_some: ContentWhereInput
  _MagicalBackRelation_ContentTable_none: ContentWhereInput
}

input TableWhereUniqueInput {
  id: ID
}

type TimeEstimate implements Node {
  id: ID!
  duration(where: DurationWhereInput): Duration!
  confidence: Float!
}

"""A connection to a list of items."""
type TimeEstimateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeEstimateEdge]!
  aggregate: AggregateTimeEstimate!
}

input TimeEstimateCreateInput {
  confidence: Float!
  duration: DurationCreateOneInput!
}

"""An edge in a connection."""
type TimeEstimateEdge {
  """The item at the end of the edge."""
  node: TimeEstimate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeEstimateOrderByInput {
  id_ASC
  id_DESC
  confidence_ASC
  confidence_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TimeEstimatePreviousValues {
  id: ID!
  confidence: Float!
}

type TimeEstimateSubscriptionPayload {
  mutation: MutationType!
  node: TimeEstimate
  updatedFields: [String!]
  previousValues: TimeEstimatePreviousValues
}

input TimeEstimateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeEstimateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeEstimateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeEstimateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeEstimateWhereInput
}

input TimeEstimateUpdateInput {
  confidence: Float
  duration: DurationUpdateOneInput
}

input TimeEstimateWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeEstimateWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeEstimateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeEstimateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  confidence: Float

  """All values that are not equal to given value."""
  confidence_not: Float

  """All values that are contained in given list."""
  confidence_in: [Float!]

  """All values that are not contained in given list."""
  confidence_not_in: [Float!]

  """All values less than the given value."""
  confidence_lt: Float

  """All values less than or equal the given value."""
  confidence_lte: Float

  """All values greater than the given value."""
  confidence_gt: Float

  """All values greater than or equal the given value."""
  confidence_gte: Float
  duration: DurationWhereInput
}

input TimeEstimateWhereUniqueInput {
  id: ID
}

type TimeKind implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type TimeKindConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeKindEdge]!
  aggregate: AggregateTimeKind!
}

input TimeKindCreateInput {
  name: String!
}

"""An edge in a connection."""
type TimeKindEdge {
  """The item at the end of the edge."""
  node: TimeKind!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeKindOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TimeKindPreviousValues {
  id: ID!
  name: String!
}

type TimeKindSubscriptionPayload {
  mutation: MutationType!
  node: TimeKind
  updatedFields: [String!]
  previousValues: TimeKindPreviousValues
}

input TimeKindSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeKindSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeKindSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeKindSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeKindWhereInput
}

input TimeKindUpdateInput {
  name: String
}

input TimeKindWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeKindWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeKindWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeKindWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input TimeKindWhereUniqueInput {
  id: ID
}

type UnorderedList implements Node {
  id: ID!
  type: String
  items(where: UnorderedListItemWhereInput, orderBy: UnorderedListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UnorderedListItem!]
}

"""A connection to a list of items."""
type UnorderedListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UnorderedListEdge]!
  aggregate: AggregateUnorderedList!
}

input UnorderedListCreateInput {
  type: String
  items: UnorderedListItemCreateManyInput
}

input UnorderedListCreateOneInput {
  create: UnorderedListCreateInput
  connect: UnorderedListWhereUniqueInput
}

"""An edge in a connection."""
type UnorderedListEdge {
  """The item at the end of the edge."""
  node: UnorderedList!

  """A cursor for use in pagination."""
  cursor: String!
}

type UnorderedListItem implements Node {
  id: ID!
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
}

"""A connection to a list of items."""
type UnorderedListItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UnorderedListItemEdge]!
  aggregate: AggregateUnorderedListItem!
}

input UnorderedListItemCreateInput {
  contents: ContentCreateManyInput
}

input UnorderedListItemCreateManyInput {
  create: [UnorderedListItemCreateInput!]
  connect: [UnorderedListItemWhereUniqueInput!]
}

"""An edge in a connection."""
type UnorderedListItemEdge {
  """The item at the end of the edge."""
  node: UnorderedListItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UnorderedListItemOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UnorderedListItemPreviousValues {
  id: ID!
}

type UnorderedListItemSubscriptionPayload {
  mutation: MutationType!
  node: UnorderedListItem
  updatedFields: [String!]
  previousValues: UnorderedListItemPreviousValues
}

input UnorderedListItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UnorderedListItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnorderedListItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnorderedListItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UnorderedListItemWhereInput
}

input UnorderedListItemUpdateDataInput {
  contents: ContentUpdateManyInput
}

input UnorderedListItemUpdateInput {
  contents: ContentUpdateManyInput
}

input UnorderedListItemUpdateManyInput {
  create: [UnorderedListItemCreateInput!]
  connect: [UnorderedListItemWhereUniqueInput!]
  disconnect: [UnorderedListItemWhereUniqueInput!]
  delete: [UnorderedListItemWhereUniqueInput!]
  update: [UnorderedListItemUpdateWithWhereUniqueNestedInput!]
  upsert: [UnorderedListItemUpsertWithWhereUniqueNestedInput!]
}

input UnorderedListItemUpdateWithWhereUniqueNestedInput {
  where: UnorderedListItemWhereUniqueInput!
  data: UnorderedListItemUpdateDataInput!
}

input UnorderedListItemUpsertWithWhereUniqueNestedInput {
  where: UnorderedListItemWhereUniqueInput!
  update: UnorderedListItemUpdateDataInput!
  create: UnorderedListItemCreateInput!
}

input UnorderedListItemWhereInput {
  """Logical AND on all given filters."""
  AND: [UnorderedListItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnorderedListItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnorderedListItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  _MagicalBackRelation_UnorderedListToUnorderedListItem_every: UnorderedListWhereInput
  _MagicalBackRelation_UnorderedListToUnorderedListItem_some: UnorderedListWhereInput
  _MagicalBackRelation_UnorderedListToUnorderedListItem_none: UnorderedListWhereInput
}

input UnorderedListItemWhereUniqueInput {
  id: ID
}

enum UnorderedListOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UnorderedListPreviousValues {
  id: ID!
  type: String
}

type UnorderedListSubscriptionPayload {
  mutation: MutationType!
  node: UnorderedList
  updatedFields: [String!]
  previousValues: UnorderedListPreviousValues
}

input UnorderedListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UnorderedListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnorderedListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnorderedListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UnorderedListWhereInput
}

input UnorderedListUpdateDataInput {
  type: String
  items: UnorderedListItemUpdateManyInput
}

input UnorderedListUpdateInput {
  type: String
  items: UnorderedListItemUpdateManyInput
}

input UnorderedListUpdateOneInput {
  create: UnorderedListCreateInput
  connect: UnorderedListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnorderedListUpdateDataInput
  upsert: UnorderedListUpsertNestedInput
}

input UnorderedListUpsertNestedInput {
  update: UnorderedListUpdateDataInput!
  create: UnorderedListCreateInput!
}

input UnorderedListWhereInput {
  """Logical AND on all given filters."""
  AND: [UnorderedListWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnorderedListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnorderedListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  items_every: UnorderedListItemWhereInput
  items_some: UnorderedListItemWhereInput
  items_none: UnorderedListItemWhereInput
  _MagicalBackRelation_ContentToUnorderedList_every: ContentWhereInput
  _MagicalBackRelation_ContentToUnorderedList_some: ContentWhereInput
  _MagicalBackRelation_ContentToUnorderedList_none: ContentWhereInput
}

input UnorderedListWhereUniqueInput {
  id: ID
}

type URL implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type URLConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [URLEdge]!
  aggregate: AggregateURL!
}

input URLCreateInput {
  name: String!
}

"""An edge in a connection."""
type URLEdge {
  """The item at the end of the edge."""
  node: URL!

  """A cursor for use in pagination."""
  cursor: String!
}

enum URLOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type URLPreviousValues {
  id: ID!
  name: String!
}

type URLSubscriptionPayload {
  mutation: MutationType!
  node: URL
  updatedFields: [String!]
  previousValues: URLPreviousValues
}

input URLSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [URLSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [URLSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [URLSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: URLWhereInput
}

input URLUpdateInput {
  name: String
}

input URLWhereInput {
  """Logical AND on all given filters."""
  AND: [URLWhereInput!]

  """Logical OR on all given filters."""
  OR: [URLWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [URLWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input URLWhereUniqueInput {
  id: ID
}

type USState implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type USStateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [USStateEdge]!
  aggregate: AggregateUSState!
}

input USStateCreateInput {
  name: String!
}

"""An edge in a connection."""
type USStateEdge {
  """The item at the end of the edge."""
  node: USState!

  """A cursor for use in pagination."""
  cursor: String!
}

enum USStateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type USStatePreviousValues {
  id: ID!
  name: String!
}

type USStateSubscriptionPayload {
  mutation: MutationType!
  node: USState
  updatedFields: [String!]
  previousValues: USStatePreviousValues
}

input USStateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [USStateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [USStateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [USStateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: USStateWhereInput
}

input USStateUpdateInput {
  name: String
}

input USStateWhereInput {
  """Logical AND on all given filters."""
  AND: [USStateWhereInput!]

  """Logical OR on all given filters."""
  OR: [USStateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [USStateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input USStateWhereUniqueInput {
  id: ID
}
